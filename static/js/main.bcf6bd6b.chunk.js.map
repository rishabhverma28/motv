{"version":3,"sources":["Components/Header/Header.js","Components/SiteImage/SiteImage.js","Components/MOTVListItem/MOTVListItem.js","Components/MOTVList/MOTVList.js","Components/Searcher/Searcher.js","Components/Homepage/Homepage.js","Components/TitleInfo/TitleInfo.js","App.js","serviceWorker.js","index.js","Images/motv.svg","Images/combined.svg"],"names":["Header","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hidden","prevPos","window","pageYOffset","handleScroll","bind","assertThisInitialized","setState","addEventListener","removeEventListener","react_default","a","createElement","className","src","Logo","alt","Component","SiteImage","homepageSVG","MOTVListItem","posterPath","title","MOTVList","windowWidth","innerWidth","updateWindowDimensions","numColumns","Math","floor","console","log","items","data","results","map","val","original_title","name","posterImg","poster_path","react_router_dom","to","pathname","concat","id","key","Components_MOTVListItem_MOTVListItem","style","gridTemplateColumns","Searcher","queryResponse","searchText","isLoading","movie","searched","errorInFetching","handleClick","handleEnter","handleKeyChange","handleMovieorTV","evt","alert","target","value","dataset","keyCode","_this2","addedString","replace","toLowerCase","movieOrTV","URL_FORMED","fetch","then","response","ok","Error","statusText","json","catch","err","data-id","onClick","htmlFor","type","onKeyDown","onChange","autoComplete","Components_MOTVList_MOTVList","Homepage","Components_SiteImage_SiteImage","Components_Searcher_Searcher","TitleInfo","getColors","colors","posterRef","React","createRef","location","getData","info","backColor","backgroundImage","backdrop_path","backgroundSize","boxShadow","backgroundColor","react_color_extractor_es","onLoad","release_date","first_air_date","vote_average","overview","App","Components_Header_Header","react_router","exact","path","component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bcf6bd6b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Header.css\";\nimport Logo from \"../../Images/motv.svg\";\n\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hidden: true,\n            prevPos: window.pageYOffset\n        };\n        this.handleScroll = this.handleScroll.bind(this);\n    }\n    handleScroll() {\n        window.pageYOffset > 50\n            ? this.setState({ hidden: false })\n            : this.setState({ hidden: true });\n    }\n    componentDidMount() {\n        window.addEventListener(\"scroll\", this.handleScroll);\n    }\n    componentWillUnmount() {\n        window.removeEventListener(\"scroll\", this.handleScroll);\n    }\n    render() {\n        return (\n            <header\n                className={\n                    this.state.hidden ? \"site-header\" : \"site-header-color\"\n                }\n            >\n                <img src={Logo} alt=\"logo\" className=\"site-header-logo\" />\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React from \"react\";\nimport homepageSVG from \"../../Images/combined.svg\";\nimport \"./SiteImage.css\";\n\nfunction SiteImage() {\n    return <img src={homepageSVG} alt=\"site intro\" className=\"site-image\" />;\n}\n\nexport default SiteImage;\n","import React, { Component } from \"react\";\nimport \"./MOTVListItem.css\";\n\nfunction MOTVListItem(props) {\n    return (\n        <div className=\"MOTV-list-item\">\n            <img\n                className=\"MOTV-list-item-img\"\n                src={props.posterPath}\n                alt=\"poster\"\n            />\n            <div className=\"MOTV-list-item-title\">{props.title}</div>\n        </div>\n    );\n}\n\nexport default MOTVListItem;\n","import React, { Component } from \"react\";\nimport \"./MOTVList.css\";\nimport MOTVListItem from \"../MOTVListItem/MOTVListItem\";\nimport { Link } from \"react-router-dom\";\n\nclass MOTVList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            windowWidth: window.innerWidth\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n    updateWindowDimensions() {\n        this.setState({\n            windowWidth: window.innerWidth\n        });\n    }\n    render() {\n        const POSTER_PATH_PREFIX = \"https://image.tmdb.org/t/p/w154/\";\n        const numColumns = Math.floor(this.state.windowWidth / 154) - 1;\n        console.log(numColumns);\n        let items = this.props.data.results.map(val => {\n            // debugger;\n            const title = val.original_title || val.name;\n            const posterImg =\n                val.poster_path === null\n                    ? \"https://via.placeholder.com/150x231?text=Poster\"\n                    : POSTER_PATH_PREFIX + val.poster_path;\n            return (\n                <Link\n                    to={{\n                        pathname: `/title/${val.id}`,\n                        state: {\n                            data: { val }\n                        }\n                    }}\n                    key={val.id}\n                >\n                    <MOTVListItem posterPath={posterImg} title={title} />\n                </Link>\n            );\n        });\n        return (\n            <div\n                className=\"MOTV-list\"\n                style={{ gridTemplateColumns: `repeat(${numColumns}, 1fr)` }}\n            >\n                {items}\n            </div>\n        );\n    }\n}\n\nexport default MOTVList;\n","import React, { Component } from \"react\";\nimport \"./Searcher.css\";\nimport MOTVList from \"../MOTVList/MOTVList\";\n\nconst API = \"https://api.themoviedb.org/3/search/\";\nconst API_KEY = \"?api_key=\" + process.env.REACT_APP_TMDB_API_KEY;\nclass Searcher extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            queryResponse: {},\n            searchText: \"\",\n            isLoading: false,\n            movie: true,\n            searched: false,\n            errorInFetching: false\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleEnter = this.handleEnter.bind(this);\n        this.handleKeyChange = this.handleKeyChange.bind(this);\n        this.handleMovieorTV = this.handleMovieorTV.bind(this);\n    }\n\n    handleKeyChange(evt) {\n        if (evt.key === \"Enter\") {\n            alert(\"pressed\");\n            this.handleClick();\n            // return;\n        } else {\n            this.setState({\n                searchText: evt.target.value\n            });\n        }\n    }\n    handleMovieorTV(evt) {\n        // alert();\n        // console.log(evt.target.dataset.id);\n        evt.target.dataset.id === \"movie\"\n            ? this.setState({ movie: true })\n            : this.setState({ movie: false });\n    }\n    handleEnter(evt) {\n        if (evt.keyCode === 13) {\n            this.handleClick();\n        } else {\n            return;\n        }\n        // return;\n        // } else {\n        // }\n    }\n    handleClick() {\n        // console.log(evt.target.value);\n        const addedString = this.state.searchText\n            .replace(/ /g, \"+\")\n            .toLowerCase();\n        let movieOrTV = this.state.movie ? \"movie\" : \"tv\";\n        // debugger;\n        console.log(addedString);\n        const URL_FORMED = API + movieOrTV + API_KEY + \"&query=\" + addedString;\n        console.log(URL_FORMED);\n\n        fetch(URL_FORMED)\n            .then(response => {\n                if (!response.ok) {\n                    throw Error(response.statusText);\n                }\n                return response.json();\n            })\n            .then(data =>\n                this.setState({\n                    isLoading: true,\n                    queryResponse: data,\n                    searched: true\n                })\n            )\n            .catch(err => {\n                console.log(err);\n                this.setState({ searched: true, errorInFetching: true });\n            });\n        // console.log(t);\n    }\n    render() {\n        // this.state.movie?:\n        const movieOrTV = this.state.movie ? \"Movie\" : \"TV Show\";\n        return (\n            <div className=\"searcher\">\n                <div className=\"searcher-container\">\n                    <div className=\"selector-buttons\">\n                        <button\n                            className={\n                                this.state.movie\n                                    ? \"selector-buttons-movie active\"\n                                    : \"selector-buttons-movie\"\n                            }\n                            data-id=\"movie\"\n                            onClick={this.handleMovieorTV}\n                        >\n                            Movie\n                        </button>\n                        <button\n                            className={\n                                this.state.movie\n                                    ? \"selector-buttons-tv\"\n                                    : \"selector-buttons-tv active\"\n                            }\n                            // className=\"selector-buttons-tv\"\n                            data-id=\"tv\"\n                            onClick={this.handleMovieorTV}\n                        >\n                            TV\n                        </button>\n                    </div>\n                    <label\n                        htmlFor=\"title-name\"\n                        className=\"searcher-container-label\"\n                    >\n                        Search for your favourite {movieOrTV}\n                    </label>\n                    <input\n                        id=\"title-name\"\n                        type=\"text\"\n                        className=\"searcher-container-input\"\n                        onKeyDown={this.handleEnter}\n                        onChange={this.handleKeyChange}\n                        autoComplete=\"off\"\n                    />\n                    <button\n                        className=\"searcher-container-button\"\n                        onClick={this.handleClick}\n                    >\n                        Search\n                    </button>\n                </div>\n                {this.state.searched && this.state.errorInFetching && (\n                    <div className=\"MOTV-list-error\">\n                        Sorry, there was an error in fetching your request\n                    </div>\n                )}\n                {this.state.searched && !this.state.errorInFetching && (\n                    <MOTVList data={this.state.queryResponse} />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Searcher;\n","import React from \"react\";\nimport Searcher from \"../Searcher/Searcher\";\nimport SiteImage from \"../SiteImage/SiteImage\";\n\nfunction Homepage() {\n    return (\n        <div>\n            <SiteImage />\n            <Searcher />\n        </div>\n    );\n}\n\nexport default Homepage;\n","import React, { Component } from \"react\";\nimport \"./TitleInfo.css\";\nimport { ColorExtractor } from \"react-color-extractor\";\n// import MOTVListItem from \"../MOTVListItem/MOTVListItem\";\n\nclass TitleInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: {},\n            colors: []\n        };\n        this.posterRef = React.createRef();\n        this.getColors = this.getColors.bind(this);\n    }\n    getData() {\n        this.setState({\n            data: this.props.location.state.data\n        });\n    }\n    // delay = ms => new Promise(res => setTimeout(res, ms));\n    // getColors() {\n    //     // await this.delay(2000);\n    //     const colorThief = new ColorThief();\n    //     const result = colorThief.getColor(\n    //         document.querySelector(\".title-info-poster-img\")\n    //     );\n    //     this.setState({\n    //         colors: result\n    //     });\n    // }\n    getColors = colors => {\n        console.log(colors);\n        this.setState({\n            colors: colors\n        });\n    };\n    componentDidMount() {\n        this.getData();\n        // this.getColors();\n        // console.log(\"jkjdksjkdjskdjs\", this.state.data.data.length);\n    }\n    render() {\n        console.log(this.state);\n        const POSTER_PATH_PREFIX = \"https://image.tmdb.org/t/p/w342/\";\n        const BACKGROUND_IMAGE_PREFIX = \"https://image.tmdb.org/t/p/original/\";\n        const info = this.state.data;\n        if (!(\"val\" in info)) {\n            return <div>loading...</div>;\n        } else {\n            const backColor = this.state.colors[0] + \"99\";\n            return (\n                <div className=\"title-info\">\n                    <div\n                        className=\"title-info-backdrop\"\n                        style={{\n                            // backgroundColor: backColor,\n                            backgroundImage: `url(${BACKGROUND_IMAGE_PREFIX +\n                                info.val.backdrop_path})`,\n                            backgroundSize: \"cover\",\n                            boxShadow: `inset 0 0 250px ${backColor}`\n                            // opacity: 0.7,\n                            // zIndex: \"-1\"\n                        }}\n                    />\n                    <div\n                        className=\"title-info-rest\"\n                        style={{\n                            backgroundColor: backColor,\n                            boxShadow: `0px -10px 35px ${backColor}`\n                        }}\n                    >\n                        <div className=\"title-info-poster\">\n                            <ColorExtractor getColors={this.getColors}>\n                                <img\n                                    src={\n                                        POSTER_PATH_PREFIX +\n                                        info.val.poster_path\n                                    }\n                                    alt=\"title poster\"\n                                    // ref={this.posterRef}\n                                    onLoad={this.getColors}\n                                    className=\"title-info-poster-img\"\n                                    // style={{\n                                    //     boxShadow: `0 0 8px 8px ${backColor} inset`\n                                    // }}\n                                />\n                            </ColorExtractor>\n                        </div>\n                        <div className=\"title-info-desc\">\n                            <div className=\"title-info-desc-title\">\n                                {info.val.original_title || info.val.name}\n                            </div>\n                            <div className=\"title-info-desc-date\">\n                                {info.val.release_date ||\n                                    info.val.first_air_date}\n                            </div>\n                            <div className=\"title-info-desc-vote\">\n                                {info.val.vote_average}\n                            </div>\n                            {/* <div>{info.val.genre_ids.join(\" \")}</div> */}\n                            <div className=\"title-info-desc-overview\">\n                                {info.val.overview}\n                            </div>\n                        </div>\n                        {/* </div> */}\n                    </div>\n                </div>\n            );\n        }\n    }\n}\n\nexport default TitleInfo;\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\n// import homepageSVG from \"./Images/combined.svg\";\nimport SiteImage from \"./Components/SiteImage/SiteImage\";\nimport Homepage from \"./Components/Homepage/Homepage\";\nimport TitleInfo from \"./Components/TitleInfo/TitleInfo\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <Switch>\n                {/* <SiteImage /> */}\n                <Route exact path=\"/\" component={Homepage} />\n                <Route exact path=\"/title/:id\" component={TitleInfo} />\n                {/* <img src={homepageSVG} alt=\"site intro\" className=\"site-image\" /> */}\n                {/* <Searcher /> */}\n            </Switch>\n        </div>\n        //     <header className=\"App-header\">\n        //         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        //         <p>\n        //             Edit <code>src/App.js</code> and save to reload.\n        //         </p>\n        //         <a\n        //             className=\"App-link\"\n        //             href=\"https://reactjs.org\"\n        //             target=\"_blank\"\n        //             rel=\"noopener noreferrer\"\n        //         >\n        //             Learn React\n        //         </a>\n        //     </header>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/motv.5487724f.svg\";","module.exports = __webpack_public_path__ + \"static/media/combined.07067166.svg\";"],"sourceRoot":""}